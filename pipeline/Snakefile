from os import path
from glob import glob
import sys
import itertools

""" Snakemake pipeline for intron quantification of MZT timecourse datasets """ 

RAWDATA = config["RAWDATA"]
DATA = config["DATA"]
SRC = config["SRC"]
RSRC = config["RSRC"]
DBASES = config["DBASES"]

CMD_CONFIG = config["CMDPARAMS"]

GENOME = config["GENOME"]
TRANSCRIPTS = config["TRANSCRIPTS"]
CHROM_SIZES = config["CHROM_SIZES"]
GENOME_DIR = config["GENOME_DIR"]
INTRONS = config["INTRONS"]
EXONS = config["EXONS"]
MEM_ALLOC = config["MALLOC"]
CLUSTER = config["CLUSTER"]
SINGULARITY = config["SINGULARITY"]

if SINGULARITY != "" or SINGULARITY is not None:
  container: SINGULARITY 


for k in MEM_ALLOC:
  if CLUSTER == "LSF":
    MEM_ALLOC[k] = int(int(MEM_ALLOC[k]) / 1024)
  else:
    MEM_ALLOC[k] = int(MEM_ALLOC)

SAMPLES = []

with open(config["LIB_PARAMS"], 'r') as f:
    hdr = f.readline()
    for line in f:
        if line.startswith("#"): continue
        fields = line.split()
        if not fields: continue
        SAMPLES.append(fields[0])

if len(SAMPLES) == 0:
    sys.exit(f"unable to parse lib params file {config['LIB_PARAMS']}")

FASTA_TYPE = "eisa"
MSKED_FASTA = "eisa_masked"

T0_SAMPLES = config["T0_SAMPLES"]

traditional_alignment_outputs = []

if INTRONS != "" and EXONS != "":
    traditional_alignment_outputs = expand(path.join(DATA,
                           "featurecounts",
                           "{sample}_intron_exon_counts.tsv"),
       sample = SAMPLES),
    
    expand(path.join(DATA, 
                                        "bigwigs", 
                                        "star", 
                                        "{sample}_{orient}.bw"),
       sample = SAMPLES,
       orient = ["fwd", "rev"]),
  
rule all:
  input: 
    path.join(DBASES, "eisa_masked.fa"),
    path.join(DBASES, "bt2", FASTA_TYPE + ".1.bt2"),

    expand(path.join(DATA, "bt2", FASTA_TYPE, "{sample}.bam"),
      sample = T0_SAMPLES), 
    
    expand(path.join(DATA, "bigwigs", "bt2", FASTA_TYPE,  "{sample}_{orient}.bw"),
       sample = T0_SAMPLES,
       orient = ["fwd", "rev"]),
     
    path.join(DBASES, "bt2", MSKED_FASTA + ".1.bt2"),
    
    expand(path.join(DATA, "bt2", MSKED_FASTA, "{sample}.bam"),
      sample = SAMPLES), 

    expand(path.join(DATA, "salmon_bt2_masked", 
        MSKED_FASTA, "{sample}", "quant.sf"),
           sample = SAMPLES), 
    traditional_alignment_outputs    


include: "rules/qc.snake"    
include: "rules/cutadapt.snake"
include: "rules/star.snake"
include: "rules/make_bigwigs.snake"
include: "rules/bowtie2.snake"
include: "rules/eisa.snake"
include: "rules/featurecounts.snake"
