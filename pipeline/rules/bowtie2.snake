
def _trimmed_fq_types(wildcards):
  
  try:
    fq_types = CMD_CONFIG["fq"]
    n_files = len(fq_types)
    if n_files == 1:
      fq_suffixes = ["_trimmed.fastq.gz"]
    elif n_files == 2:
      fq_suffixes = ["_R1_trimmed.fastq.gz",
                     "_R2_trimmed.fastq.gz"]
    else:
      sys.exit("unknown fastq prefix setting for trimmed files")
    fq_names = [path.join(wildcards.data,
                          "fastq",
                          "trimmed",
                          wildcards.sample + x) for x in fq_suffixes]
  except:
     sys.exit("No trimming settings found for library: {}".format(id))

  return fq_names

def _btmap_settings(wildcards):
  try: 
     strand = CMD_CONFIG["stranded"]
     if strand == "forward":
         strand_setting = " --norc "
     elif strand == "reverse":
         strand_setting = " --nofw "
     elif strand == "unstranded":
         strand_setting = " "
     else:
       print("WARNING: no map settings found for library: {}".format(id),
         file = sys.stderr)
     additional_map_settings = CMD_CONFIG["bowtie"]
  except:
     print("WARNING: no map settings found for library: {}".format(id),
       file = sys.stderr)
     map_settings = ""
  map_settings = strand_setting + additional_map_settings
  return map_settings

def _btinput_options(wildcards):
  
  fqs = _trimmed_fq_types(wildcards)
  if len(fqs) == 1:
      io_option = " -U {fq[0]} ".format(fq = fqs)
  elif len(fqs) > 1:
      io_option = " -1 {fq[0]} -2 {fq[1]} ".format(fq = fqs)
  else:
      sys.exit("no fastq suffixes found for library: {}".format(id))
  return io_option

def _salmon_settings(wildcards):
  
  id = os.path.basename(wildcards.sample)
  try:
     map_settings = CMD_CONFIG["salmon"]
  except:
     print("warning: No salmon quant settings found for library: {}".format(id),
       file = sys.stderr)
     map_settings = ""

  return map_settings

rule salmon_alignment_mode:
    """
    run salmon on bams
    """
    input:
      bam = path.join("{data}", "bt2",  "{fasta}", "{sample}.bam"),
      fa = path.join(DBASES,  "{fasta}.fa")
    output:
      path.join("{data}", "salmon_bt2_masked",  "{fasta}", "{sample}", "quant.sf")
    params:
      settings = _salmon_settings,
      idx = path.join(DBASES, "salmon"),
      out_dir = path.join("{data}", "salmon_bt2_masked", "{fasta}", "{sample}"),
    log:
      path.join("{data}", "logs", "salmon_bt2_masked", "{fasta}", "{sample}")
    threads: 12
    resources: 
        all_threads=12,
        mem_mb = MEM_ALLOC["SALMON"]
    shell:
      """
      salmon quant \
        -t {input.fa} \
        {params.settings} \
        -a {input.bam} \
        -o {params.out_dir} \
        -p {threads} \
        --numBootstraps 50 
      """

rule bt:
    """
    run bowtie2 against transcriptome 
    """
    input:
      idx = path.join(DBASES,  "bt2", "{fasta}.1.bt2"),
      R1 = _trimmed_fq_types,
    output:
      bam = path.join("{data}", "bt2", "{fasta}", "{sample}.bam")
    params:
      io = _btinput_options,
      settings = _btmap_settings,
      idx = path.join(DBASES, "bt2", "{fasta}"),
    log:
      path.join("{data}", "logs", "bt2", "{fasta}", "{sample}")
    threads: 24 
    resources: 
        all_threads=24,
        mem_mb = MEM_ALLOC["STAR"]
    shell:
      """
        bowtie2 \
          -x {params.idx} \
          --local \
          --threads {threads} \
          -k 250 \
          {params.settings} \
          {params.io} \
          | samtools view -bS \
          > {output.bam}  
      """

rule bt_idx:
    """
    build bowtie2 index 
    """
    input:
      path.join(DBASES, "{fasta}.fa")
    output:
      path.join(DBASES,  "bt2", "{fasta}.1.bt2")
    params:
      idx = path.join(DBASES, "bt2", "{fasta}"),
    log:
        path.join(DBASES, "logs", "bt2",  "{fasta}_idx")
    threads: 1
    resources: 
        all_threads=1,
        mem_mb=MEM_ALLOC["DEFAULT"]
    shell:
      """
      bowtie2-build \
        {input} \
        {params.idx} 
      """

