""" rules for trimming """ 

def _trim_settings(wildcards):
  try:
    trim_settings = CMD_CONFIG["trim"]
  except:
    print("WARNING: no trimming settings found for library: {}".format(id),
      file = sys.stderr)
    trim_settings = ""

  return trim_settings

def _fq_types(wildcards):
  id = os.path.basename(wildcards.sample)
  if id in LIB_MAP:
     lib_attrs = LIB_MAP[id]
     fq_types = config[lib_attrs]["fq"]
     fq_names = [path.join(wildcards.data,
                           "raw_data",
                           wildcards.species, 
                           wildcards.expt, 
                           wildcards.sample + x) for x in fq_types]
  else:
     sys.exit("No trimming settings found for library: {}".format(id))

  return fq_names

rule cutadapt_single:
  input:
    _raw_fqs, 
  output:
    temp(path.join("{data}", "fastq", "trimmed", "{sample}_trimmed.fastq.gz"))
  params:
    settings = _trim_settings,
  log:
    path.join("{data}", "logs", "cutadapt", "{sample}.txt") 
  message:
    " trimming adapters" 
  threads:
    6
  resources: 
      all_threads=6,
      mem_mb=MEM_ALLOC["DEFAULT"]
  shell:
    """
    cutadapt \
      -m 20 \
      --cores {threads} \
      {params.settings} \
      -o {output} \
      {input[0]} 
    """

rule cutadapt_paired:
  input:
    _raw_fqs, 
  output:
    path.join("{data}", "fastq", "trimmed",
    "{sample}_R1_trimmed.fastq.gz"), 
    path.join("{data}", "fastq", "trimmed", 
    "{sample}_R2_trimmed.fastq.gz") 
  params:
    settings = _trim_settings,
  log:
    path.join("{data}", "logs", "cutadapt", "{sample}.txt") 
  message:
    " trimming adapters" 
  threads:
    6
  resources: 
      all_threads=6,
      mem_mb=MEM_ALLOC["DEFAULT"]
  shell:
    """
    cutadapt \
      -m 20 \
      --cores {threads} \
      {params.settings} \
      -o {output[0]} \
      -p {output[1]} \
      {input[0]}  \
      {input[1]}
    """

